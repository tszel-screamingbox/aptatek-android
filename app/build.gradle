apply from: "${project.rootDir}/dependencies.gradle"
apply from: "${project.rootDir}/signing/signing.gradle"
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.google.firebase.crashlytics'

jacoco {
    toolVersion = "${versions.jacoco}"
}

checkstyle {
    toolVersion "${versions.checkstyle}"
}

android {
    compileSdkVersion versions.targetsdk
    buildToolsVersion versions.buildToolsVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.aptatek.pkulab"
        minSdkVersion versions.minsdk
        targetSdkVersion versions.targetsdk
        vectorDrawables.useSupportLibrary = true
        versionCode 53
        versionName "0.0.53"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments disableAnalytics: 'true'
        testInstrumentationRunnerArguments clearPackageData: 'true'
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "UXCAM_KEY", '"ff036o841eohxck"'
            buildConfigField "String", "AMPLITUDE_KEY", '"7d37cca301af691003fe8a2a7715147a"'
        }

        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            multiDexEnabled true

            buildConfigField "String", "UXCAM_KEY", '"sunsy8h9lv8kwuj"'
            buildConfigField "String", "AMPLITUDE_KEY", '"7d37cca301af691003fe8a2a7715147a"'
        }
    }

    flavorDimensions "mock"

    productFlavors {

        mock {
            applicationIdSuffix ".mock"
            versionNameSuffix "-mock"
            dimension "mock"
        }

        prod {
            dimension "mock"
        }

    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    namespace 'com.aptatek.pkulab'
    lint {
        abortOnError false
        disable 'MissingTranslation', 'RestrictedApi'
    }

}

checkstyle {
    configFile rootProject.file('quality/checkstyle.xml')
    showViolations true
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    // Support
    implementation androidSupportDependencies.appcompat
    implementation androidSupportDependencies.annotations
    implementation androidSupportDependencies.recyclerview
    implementation androidSupportDependencies.constraintLayout
    implementation androidSupportDependencies.design
    implementation androidSupportDependencies.multidex

    // ArchitectureComponents
    implementation architectureComponentsDependencies.extensions
    annotationProcessor architectureComponentsDependencies.compiler

    // MVP
    implementation mvpDependencies.mosby
    implementation mvpDependencies.viewstate

    // View binding
    implementation butterknifeDependencies.butterknife
    annotationProcessor butterknifeDependencies.compiler

    // RX
    implementation rxDependencies.rxjava
    implementation rxDependencies.rxandroid
    implementation rxDependencies.ixjava

    // Dagger
    implementation daggerDependencies.dagger
    annotationProcessor daggerDependencies.compiler
    compileOnly daggerDependencies.annotations

    // Database
    implementation databaseDependencies.room
    annotationProcessor databaseDependencies.compiler
    implementation databaseDependencies.sqlcipher
    implementation databaseDependencies.rxjava

    // Logger framework
    implementation appDependencies.timber

    // Analytics
    implementation platform(analyticDependencies.bom)
    implementation analyticDependencies.crashlytics
    implementation analyticDependencies.analytics
    implementation analyticDependencies.uxcam
    implementation analyticDependencies.amplitude

    // AutoValue
    implementation autoValueDependencies.api
    annotationProcessor autoValueDependencies.compiler
    annotationProcessor autoValueDependencies.parceler

    // IntentBuilder
    implementation activityStarterDependencies.activityStarter
    annotationProcessor activityStarterDependencies.apt

    // UI
    implementation(uiDependencies.rangebar) {
        exclude module: 'support-compat'
    }
    implementation uiDependencies.pagerIndicator
    implementation uiDependencies.frameVideoView
    implementation uiDependencies.slidingPanel
    implementation scrollView.discreteScrollView
    implementation uiDependencies.flexBox

    // RootBeer
    implementation rootDetectionDependencies.rootBeer

    // MpAndroidChart
    implementation mpAndroidChartDependencies.androidChart

    // Time
    implementation timeDependencies.yodatime

    // Bluetooth
    prodImplementation bluetoothDependencies.nordicBle
    prodImplementation bluetoothDependencies.scanner

    // JSON
    implementation jsonDependencies.gson

    // CSV
    implementation csvDependencies.openCsv

    // Mock data
    mockImplementation appDependencies.dataFactory

    // Tests
    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    androidTestImplementation androidSupportDependencies.multidex
    testImplementation databaseDependencies.testhelper
    androidTestImplementation testDependencies.testrunner
    androidTestImplementation testDependencies.testrules
    androidTestImplementation testDependencies.hamcrest
    androidTestImplementation(testDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation(testDependencies.espressocontrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
    }
    androidTestAnnotationProcessor daggerDependencies.compiler
    androidTestCompileOnly daggerDependencies.annotations
    androidTestUtil testDependencies.orchestrator

}

task customCheckstyle(type: Checkstyle, dependsOn: 'assembleProdDebug') {
    description = 'Running Checkstyle'
    group = 'verification'
    ignoreFailures = true
    showViolations = true

    configFile file("$rootProject.rootDir/quality/checkstyle.xml")

    source 'src/main/java', 'src/prod/java'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    reports {
        xml.enabled = false
        html.enabled = true
        xml.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }

    classpath = files()
}

task customPmd(type: Pmd, dependsOn: 'assembleProdDebug') {
    ruleSetFiles = files("$rootProject.rootDir/quality/pmd.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src/main/java', 'src/prod/java'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination file("$project.buildDir/reports/pmd/pmd.html")
        }
    }
}

def coverageSourceDirs = [
        'src/main/java',
        'src/prod/java'
]

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testProdDebugUnitTest') {
    description = 'Generate JaCoCo coverage reports'
    group = 'Reporting'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getClassDirectories().setFrom(fileTree(
            dir: 'build/intermediates/classes/prod/debug',
            excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/AutoValue_*.*',
                    '**/Dagger*.*',
                    '**/*Module_Provide*Factory.*',
                    '**/*_Factory.*',
                    '**/*_MembersInjector.*',
                    '**/*_ViewBinding*',
                    '**/*_LifecycleAdapter.*',
                    '**/base/**',
                    '**/injection/**'
            ]
    ))

    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(fileTree(
            dir: "$buildDir",
            include: ['jacoco/testProdDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec', '../../firebase/*coverage.ec']
    ))

    doFirst {
        files('build/intermediates/classes/prod/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

apply plugin: 'com.google.gms.google-services'
